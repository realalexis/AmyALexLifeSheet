{
  "version": 3,
  "sources": ["../../@radix-ui/react-menubar/dist/packages/react/menubar/src/index.ts", "../../@radix-ui/react-menubar/dist/packages/react/menubar/src/Menubar.tsx"],
  "sourcesContent": ["export {\n  createMenubarScope,\n  //\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarPortal,\n  MenubarContent,\n  MenubarGroup,\n  MenubarLabel,\n  MenubarItem,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarItemIndicator,\n  MenubarSeparator,\n  MenubarArrow,\n  MenubarSub,\n  MenubarSubTrigger,\n  MenubarSubContent,\n  //\n  Root,\n  Menu,\n  Trigger,\n  Portal,\n  Content,\n  Group,\n  Label,\n  Item,\n  CheckboxItem,\n  RadioGroup,\n  RadioItem,\n  ItemIndicator,\n  Separator,\n  Arrow,\n  Sub,\n  SubTrigger,\n  SubContent,\n} from './Menubar';\nexport type {\n  MenubarProps,\n  MenubarMenuProps,\n  MenubarTriggerProps,\n  MenubarPortalProps,\n  MenubarContentProps,\n  MenubarGroupProps,\n  MenubarLabelProps,\n  MenubarItemProps,\n  MenubarCheckboxItemProps,\n  MenubarRadioGroupProps,\n  MenubarRadioItemProps,\n  MenubarItemIndicatorProps,\n  MenubarSeparatorProps,\n  MenubarArrowProps,\n  MenubarSubProps,\n  MenubarSubTriggerProps,\n  MenubarSubContentProps,\n} from './Menubar';\n", "import * as React from 'react';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport * as MenuPrimitive from '@radix-ui/react-menu';\nimport { createMenuScope } from '@radix-ui/react-menu';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\n\nimport type { Scope } from '@radix-ui/react-context';\nimport type * as Radix from '@radix-ui/react-primitive';\n\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * Menubar\n * -----------------------------------------------------------------------------------------------*/\n\nconst MENUBAR_NAME = 'Menubar';\n\ntype ItemData = { value: string; disabled: boolean };\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  MenubarTriggerElement,\n  ItemData\n>(MENUBAR_NAME);\n\ntype ScopedProps<P> = P & { __scopeMenubar?: Scope };\nconst [createMenubarContext, createMenubarScope] = createContextScope(MENUBAR_NAME, [\n  createCollectionScope,\n  createRovingFocusGroupScope,\n]);\n\nconst useMenuScope = createMenuScope();\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\n\ntype MenubarContextValue = {\n  value: string;\n  dir: Direction;\n  loop: boolean;\n  onMenuOpen(value: string): void;\n  onMenuClose(): void;\n  onMenuToggle(value: string): void;\n};\n\nconst [MenubarContextProvider, useMenubarContext] =\n  createMenubarContext<MenubarContextValue>(MENUBAR_NAME);\n\ntype MenubarElement = React.ElementRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = Radix.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface MenubarProps extends PrimitiveDivProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  loop?: RovingFocusGroupProps['loop'];\n  dir?: RovingFocusGroupProps['dir'];\n}\n\nconst Menubar = React.forwardRef<MenubarElement, MenubarProps>(\n  (props: ScopedProps<MenubarProps>, forwardedRef) => {\n    const {\n      __scopeMenubar,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      loop = true,\n      dir,\n      ...menubarProps\n    } = props;\n    const direction = useDirection(dir);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n    const [value = '', setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChange,\n      defaultProp: defaultValue,\n    });\n\n    // We need to manage tab stop id manually as `RovingFocusGroup` updates the stop\n    // based on focus, and in some situations our triggers won't ever be given focus\n    // (e.g. click to open and then outside to close)\n    const [currentTabStopId, setCurrentTabStopId] = React.useState<string | null>(null);\n\n    return (\n      <MenubarContextProvider\n        scope={__scopeMenubar}\n        value={value}\n        onMenuOpen={React.useCallback(\n          (value) => {\n            setValue(value);\n            setCurrentTabStopId(value);\n          },\n          [setValue]\n        )}\n        onMenuClose={React.useCallback(() => setValue(''), [setValue])}\n        onMenuToggle={React.useCallback(\n          (value) => {\n            setValue((prevValue) => (Boolean(prevValue) ? '' : value));\n            // `openMenuOpen` and `onMenuToggle` are called exclusively so we\n            // need to update the id in either case.\n            setCurrentTabStopId(value);\n          },\n          [setValue]\n        )}\n        dir={direction}\n        loop={loop}\n      >\n        <Collection.Provider scope={__scopeMenubar}>\n          <Collection.Slot scope={__scopeMenubar}>\n            <RovingFocusGroup.Root\n              asChild\n              {...rovingFocusGroupScope}\n              orientation=\"horizontal\"\n              loop={loop}\n              dir={direction}\n              currentTabStopId={currentTabStopId}\n              onCurrentTabStopIdChange={setCurrentTabStopId}\n            >\n              <Primitive.div role=\"menubar\" {...menubarProps} ref={forwardedRef} />\n            </RovingFocusGroup.Root>\n          </Collection.Slot>\n        </Collection.Provider>\n      </MenubarContextProvider>\n    );\n  }\n);\n\nMenubar.displayName = MENUBAR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst MENU_NAME = 'MenubarMenu';\n\ntype MenubarMenuContextValue = {\n  value: string;\n  triggerId: string;\n  triggerRef: React.RefObject<MenubarTriggerElement>;\n  contentId: string;\n  wasKeyboardTriggerOpenRef: React.MutableRefObject<boolean>;\n};\n\nconst [MenubarMenuProvider, useMenubarMenuContext] =\n  createMenubarContext<MenubarMenuContextValue>(MENU_NAME);\n\ninterface MenubarMenuProps {\n  value?: string;\n  children?: React.ReactNode;\n}\n\nconst MenubarMenu = (props: ScopedProps<MenubarMenuProps>) => {\n  const { __scopeMenubar, value: valueProp, ...menuProps } = props;\n  const autoValue = useId();\n  // We need to provide an initial deterministic value as `useId` will return\n  // empty string on the first render and we don't want to match our internal \"closed\" value.\n  const value = valueProp || autoValue || 'LEGACY_REACT_AUTO_VALUE';\n  const context = useMenubarContext(MENU_NAME, __scopeMenubar);\n  const menuScope = useMenuScope(__scopeMenubar);\n  const triggerRef = React.useRef<MenubarTriggerElement>(null);\n  const wasKeyboardTriggerOpenRef = React.useRef(false);\n  const open = context.value === value;\n\n  React.useEffect(() => {\n    if (!open) wasKeyboardTriggerOpenRef.current = false;\n  }, [open]);\n\n  return (\n    <MenubarMenuProvider\n      scope={__scopeMenubar}\n      value={value}\n      triggerId={useId()}\n      triggerRef={triggerRef}\n      contentId={useId()}\n      wasKeyboardTriggerOpenRef={wasKeyboardTriggerOpenRef}\n    >\n      <MenuPrimitive.Root\n        {...menuScope}\n        open={open}\n        onOpenChange={(open) => {\n          // Menu only calls `onOpenChange` when dismissing so we\n          // want to close our MenuBar based on the same events.\n          if (!open) context.onMenuClose();\n        }}\n        modal={false}\n        dir={context.dir}\n        {...menuProps}\n      />\n    </MenubarMenuProvider>\n  );\n};\n\nMenubarMenu.displayName = MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'MenubarTrigger';\n\ntype MenubarTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface MenubarTriggerProps extends PrimitiveButtonProps {}\n\nconst MenubarTrigger = React.forwardRef<MenubarTriggerElement, MenubarTriggerProps>(\n  (props: ScopedProps<MenubarTriggerProps>, forwardedRef) => {\n    const { __scopeMenubar, disabled = false, ...triggerProps } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n    const menuScope = useMenuScope(__scopeMenubar);\n    const context = useMenubarContext(TRIGGER_NAME, __scopeMenubar);\n    const menuContext = useMenubarMenuContext(TRIGGER_NAME, __scopeMenubar);\n    const ref = React.useRef<MenubarTriggerElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, menuContext.triggerRef);\n    const [isFocused, setIsFocused] = React.useState(false);\n    const open = context.value === menuContext.value;\n\n    return (\n      <Collection.ItemSlot scope={__scopeMenubar} value={menuContext.value} disabled={disabled}>\n        <RovingFocusGroup.Item\n          asChild\n          {...rovingFocusGroupScope}\n          focusable={!disabled}\n          tabStopId={menuContext.value}\n        >\n          <MenuPrimitive.Anchor asChild {...menuScope}>\n            <Primitive.button\n              type=\"button\"\n              role=\"menuitem\"\n              id={menuContext.triggerId}\n              aria-haspopup=\"menu\"\n              aria-expanded={open}\n              aria-controls={open ? menuContext.contentId : undefined}\n              data-highlighted={isFocused ? '' : undefined}\n              data-state={open ? 'open' : 'closed'}\n              data-disabled={disabled ? '' : undefined}\n              disabled={disabled}\n              {...triggerProps}\n              ref={composedRefs}\n              onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n                // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n                // but not when the control key is pressed (avoiding MacOS right click)\n                if (!disabled && event.button === 0 && event.ctrlKey === false) {\n                  context.onMenuOpen(menuContext.value);\n                  // prevent trigger focusing when opening\n                  // this allows the content to be given focus without competition\n                  if (!open) event.preventDefault();\n                }\n              })}\n              onPointerEnter={composeEventHandlers(props.onPointerEnter, () => {\n                const menubarOpen = Boolean(context.value);\n                if (menubarOpen && !open) {\n                  context.onMenuOpen(menuContext.value);\n                  ref.current?.focus();\n                }\n              })}\n              onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n                if (disabled) return;\n                if (['Enter', ' '].includes(event.key)) context.onMenuToggle(menuContext.value);\n                if (event.key === 'ArrowDown') context.onMenuOpen(menuContext.value);\n                // prevent keydown from scrolling window / first focused item to execute\n                // that keydown (inadvertently closing the menu)\n                if (['Enter', ' ', 'ArrowDown'].includes(event.key)) {\n                  menuContext.wasKeyboardTriggerOpenRef.current = true;\n                  event.preventDefault();\n                }\n              })}\n              onFocus={composeEventHandlers(props.onFocus, () => setIsFocused(true))}\n              onBlur={composeEventHandlers(props.onBlur, () => setIsFocused(false))}\n            />\n          </MenuPrimitive.Anchor>\n        </RovingFocusGroup.Item>\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nMenubarTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'MenubarPortal';\n\ntype MenuPortalProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Portal>;\ninterface MenubarPortalProps extends MenuPortalProps {}\n\nconst MenubarPortal: React.FC<MenubarPortalProps> = (props: ScopedProps<MenubarPortalProps>) => {\n  const { __scopeMenubar, ...portalProps } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return <MenuPrimitive.Portal {...menuScope} {...portalProps} />;\n};\n\nMenubarPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'MenubarContent';\n\ntype MenubarContentElement = React.ElementRef<typeof MenuPrimitive.Content>;\ntype MenuContentProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Content>;\ninterface MenubarContentProps extends Omit<MenuContentProps, 'onEntryFocus'> {}\n\nconst MenubarContent = React.forwardRef<MenubarContentElement, MenubarContentProps>(\n  (props: ScopedProps<MenubarContentProps>, forwardedRef) => {\n    const { __scopeMenubar, align = 'start', ...contentProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    const context = useMenubarContext(CONTENT_NAME, __scopeMenubar);\n    const menuContext = useMenubarMenuContext(CONTENT_NAME, __scopeMenubar);\n    const getItems = useCollection(__scopeMenubar);\n    const hasInteractedOutsideRef = React.useRef(false);\n\n    return (\n      <MenuPrimitive.Content\n        id={menuContext.contentId}\n        aria-labelledby={menuContext.triggerId}\n        data-radix-menubar-content=\"\"\n        {...menuScope}\n        {...contentProps}\n        ref={forwardedRef}\n        align={align}\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          const menubarOpen = Boolean(context.value);\n          if (!menubarOpen && !hasInteractedOutsideRef.current) {\n            menuContext.triggerRef.current?.focus();\n          }\n\n          hasInteractedOutsideRef.current = false;\n          // Always prevent auto focus because we either focus manually or want user agent focus\n          event.preventDefault();\n        })}\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) => {\n          const target = event.target as HTMLElement;\n          const isMenubarTrigger = getItems().some((item) => item.ref.current?.contains(target));\n          if (isMenubarTrigger) event.preventDefault();\n        })}\n        onInteractOutside={composeEventHandlers(props.onInteractOutside, () => {\n          hasInteractedOutsideRef.current = true;\n        })}\n        onEntryFocus={(event) => {\n          if (!menuContext.wasKeyboardTriggerOpenRef.current) event.preventDefault();\n        }}\n        onKeyDown={composeEventHandlers(\n          props.onKeyDown,\n          (event) => {\n            if (['ArrowRight', 'ArrowLeft'].includes(event.key)) {\n              const target = event.target as HTMLElement;\n              const targetIsSubTrigger = target.hasAttribute('data-radix-menubar-subtrigger');\n              const isKeyDownInsideSubMenu =\n                target.closest('[data-radix-menubar-content]') !== event.currentTarget;\n\n              const prevMenuKey = context.dir === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n              const isPrevKey = prevMenuKey === event.key;\n              const isNextKey = !isPrevKey;\n\n              // Prevent navigation when we're opening a submenu\n              if (isNextKey && targetIsSubTrigger) return;\n              // or we're inside a submenu and are moving backwards to close it\n              if (isKeyDownInsideSubMenu && isPrevKey) return;\n\n              const items = getItems().filter((item) => !item.disabled);\n              let candidateValues = items.map((item) => item.value);\n              if (isPrevKey) candidateValues.reverse();\n\n              const currentIndex = candidateValues.indexOf(menuContext.value);\n\n              candidateValues = context.loop\n                ? wrapArray(candidateValues, currentIndex + 1)\n                : candidateValues.slice(currentIndex + 1);\n\n              const [nextValue] = candidateValues;\n              if (nextValue) context.onMenuOpen(nextValue);\n            }\n          },\n          { checkForDefaultPrevented: false }\n        )}\n        style={{\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-menubar-content-transform-origin': 'var(--radix-popper-transform-origin)',\n            '--radix-menubar-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-menubar-content-available-height': 'var(--radix-popper-available-height)',\n            '--radix-menubar-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-menubar-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    );\n  }\n);\n\nMenubarContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'MenubarGroup';\n\ntype MenubarGroupElement = React.ElementRef<typeof MenuPrimitive.Group>;\ntype MenuGroupProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Group>;\ninterface MenubarGroupProps extends MenuGroupProps {}\n\nconst MenubarGroup = React.forwardRef<MenubarGroupElement, MenubarGroupProps>(\n  (props: ScopedProps<MenubarGroupProps>, forwardedRef) => {\n    const { __scopeMenubar, ...groupProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Group {...menuScope} {...groupProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'MenubarLabel';\n\ntype MenubarLabelElement = React.ElementRef<typeof MenuPrimitive.Label>;\ntype MenuLabelProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Label>;\ninterface MenubarLabelProps extends MenuLabelProps {}\n\nconst MenubarLabel = React.forwardRef<MenubarLabelElement, MenubarLabelProps>(\n  (props: ScopedProps<MenubarLabelProps>, forwardedRef) => {\n    const { __scopeMenubar, ...labelProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Label {...menuScope} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'MenubarItem';\n\ntype MenubarItemElement = React.ElementRef<typeof MenuPrimitive.Item>;\ntype MenuItemProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Item>;\ninterface MenubarItemProps extends MenuItemProps {}\n\nconst MenubarItem = React.forwardRef<MenubarItemElement, MenubarItemProps>(\n  (props: ScopedProps<MenubarItemProps>, forwardedRef) => {\n    const { __scopeMenubar, ...itemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Item {...menuScope} {...itemProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarCheckboxItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_ITEM_NAME = 'MenubarCheckboxItem';\n\ntype MenubarCheckboxItemElement = React.ElementRef<typeof MenuPrimitive.CheckboxItem>;\ntype MenuCheckboxItemProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.CheckboxItem>;\ninterface MenubarCheckboxItemProps extends MenuCheckboxItemProps {}\n\nconst MenubarCheckboxItem = React.forwardRef<MenubarCheckboxItemElement, MenubarCheckboxItemProps>(\n  (props: ScopedProps<MenubarCheckboxItemProps>, forwardedRef) => {\n    const { __scopeMenubar, ...checkboxItemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.CheckboxItem {...menuScope} {...checkboxItemProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarRadioGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_GROUP_NAME = 'MenubarRadioGroup';\n\ntype MenubarRadioGroupElement = React.ElementRef<typeof MenuPrimitive.RadioGroup>;\ntype MenuRadioGroupProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioGroup>;\ninterface MenubarRadioGroupProps extends MenuRadioGroupProps {}\n\nconst MenubarRadioGroup = React.forwardRef<MenubarRadioGroupElement, MenubarRadioGroupProps>(\n  (props: ScopedProps<MenubarRadioGroupProps>, forwardedRef) => {\n    const { __scopeMenubar, ...radioGroupProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.RadioGroup {...menuScope} {...radioGroupProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarRadioItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_ITEM_NAME = 'MenubarRadioItem';\n\ntype MenubarRadioItemElement = React.ElementRef<typeof MenuPrimitive.RadioItem>;\ntype MenuRadioItemProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioItem>;\ninterface MenubarRadioItemProps extends MenuRadioItemProps {}\n\nconst MenubarRadioItem = React.forwardRef<MenubarRadioItemElement, MenubarRadioItemProps>(\n  (props: ScopedProps<MenubarRadioItemProps>, forwardedRef) => {\n    const { __scopeMenubar, ...radioItemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.RadioItem {...menuScope} {...radioItemProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarRadioItem.displayName = RADIO_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'MenubarItemIndicator';\n\ntype MenubarItemIndicatorElement = React.ElementRef<typeof MenuPrimitive.ItemIndicator>;\ntype MenuItemIndicatorProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.ItemIndicator>;\ninterface MenubarItemIndicatorProps extends MenuItemIndicatorProps {}\n\nconst MenubarItemIndicator = React.forwardRef<\n  MenubarItemIndicatorElement,\n  MenubarItemIndicatorProps\n>((props: ScopedProps<MenubarItemIndicatorProps>, forwardedRef) => {\n  const { __scopeMenubar, ...itemIndicatorProps } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return <MenuPrimitive.ItemIndicator {...menuScope} {...itemIndicatorProps} ref={forwardedRef} />;\n});\n\nMenubarItemIndicator.displayName = INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'MenubarSeparator';\n\ntype MenubarSeparatorElement = React.ElementRef<typeof MenuPrimitive.Separator>;\ntype MenuSeparatorProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Separator>;\ninterface MenubarSeparatorProps extends MenuSeparatorProps {}\n\nconst MenubarSeparator = React.forwardRef<MenubarSeparatorElement, MenubarSeparatorProps>(\n  (props: ScopedProps<MenubarSeparatorProps>, forwardedRef) => {\n    const { __scopeMenubar, ...separatorProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Separator {...menuScope} {...separatorProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'MenubarArrow';\n\ntype MenubarArrowElement = React.ElementRef<typeof MenuPrimitive.Arrow>;\ntype MenuArrowProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Arrow>;\ninterface MenubarArrowProps extends MenuArrowProps {}\n\nconst MenubarArrow = React.forwardRef<MenubarArrowElement, MenubarArrowProps>(\n  (props: ScopedProps<MenubarArrowProps>, forwardedRef) => {\n    const { __scopeMenubar, ...arrowProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Arrow {...menuScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarArrow.displayName = ARROW_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSub\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_NAME = 'MenubarSub';\n\ninterface MenubarSubProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst MenubarSub: React.FC<MenubarSubProps> = (props: ScopedProps<MenubarSubProps>) => {\n  const { __scopeMenubar, children, open: openProp, onOpenChange, defaultOpen } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <MenuPrimitive.Sub {...menuScope} open={open} onOpenChange={setOpen}>\n      {children}\n    </MenuPrimitive.Sub>\n  );\n};\n\nMenubarSub.displayName = SUB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSubTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_TRIGGER_NAME = 'MenubarSubTrigger';\n\ntype MenubarSubTriggerElement = React.ElementRef<typeof MenuPrimitive.SubTrigger>;\ntype MenuSubTriggerProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.SubTrigger>;\ninterface MenubarSubTriggerProps extends MenuSubTriggerProps {}\n\nconst MenubarSubTrigger = React.forwardRef<MenubarSubTriggerElement, MenubarSubTriggerProps>(\n  (props: ScopedProps<MenubarSubTriggerProps>, forwardedRef) => {\n    const { __scopeMenubar, ...subTriggerProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return (\n      <MenuPrimitive.SubTrigger\n        data-radix-menubar-subtrigger=\"\"\n        {...menuScope}\n        {...subTriggerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nMenubarSubTrigger.displayName = SUB_TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSubContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_CONTENT_NAME = 'MenubarSubContent';\n\ntype MenubarSubContentElement = React.ElementRef<typeof MenuPrimitive.Content>;\ntype MenuSubContentProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.SubContent>;\ninterface MenubarSubContentProps extends MenuSubContentProps {}\n\nconst MenubarSubContent = React.forwardRef<MenubarSubContentElement, MenubarSubContentProps>(\n  (props: ScopedProps<MenubarSubContentProps>, forwardedRef) => {\n    const { __scopeMenubar, ...subContentProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n\n    return (\n      <MenuPrimitive.SubContent\n        {...menuScope}\n        data-radix-menubar-content=\"\"\n        {...subContentProps}\n        ref={forwardedRef}\n        style={{\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-menubar-content-transform-origin': 'var(--radix-popper-transform-origin)',\n            '--radix-menubar-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-menubar-content-available-height': 'var(--radix-popper-available-height)',\n            '--radix-menubar-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-menubar-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    );\n  }\n);\n\nMenubarSubContent.displayName = SUB_CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\n\nconst Root = Menubar;\nconst Menu = MenubarMenu;\nconst Trigger = MenubarTrigger;\nconst Portal = MenubarPortal;\nconst Content = MenubarContent;\nconst Group = MenubarGroup;\nconst Label = MenubarLabel;\nconst Item = MenubarItem;\nconst CheckboxItem = MenubarCheckboxItem;\nconst RadioGroup = MenubarRadioGroup;\nconst RadioItem = MenubarRadioItem;\nconst ItemIndicator = MenubarItemIndicator;\nconst Separator = MenubarSeparator;\nconst Arrow = MenubarArrow;\nconst Sub = MenubarSub;\nconst SubTrigger = MenubarSubTrigger;\nconst SubContent = MenubarSubContent;\n\nexport {\n  createMenubarScope,\n  //\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarPortal,\n  MenubarContent,\n  MenubarGroup,\n  MenubarLabel,\n  MenubarItem,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarItemIndicator,\n  MenubarSeparator,\n  MenubarArrow,\n  MenubarSub,\n  MenubarSubTrigger,\n  MenubarSubContent,\n  //\n  Root,\n  Menu,\n  Trigger,\n  Portal,\n  Content,\n  Group,\n  Label,\n  Item,\n  CheckboxItem,\n  RadioGroup,\n  RadioItem,\n  ItemIndicator,\n  Separator,\n  Arrow,\n  Sub,\n  SubTrigger,\n  SubContent,\n};\nexport type {\n  MenubarProps,\n  MenubarMenuProps,\n  MenubarTriggerProps,\n  MenubarPortalProps,\n  MenubarContentProps,\n  MenubarGroupProps,\n  MenubarLabelProps,\n  MenubarItemProps,\n  MenubarCheckboxItemProps,\n  MenubarRadioGroupProps,\n  MenubarRadioItemProps,\n  MenubarItemIndicatorProps,\n  MenubarSeparatorProps,\n  MenubarArrowProps,\n  MenubarSubProps,\n  MenubarSubTriggerProps,\n  MenubarSubContentProps,\n};\n"],
  "mappings": "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",
  "names": ["MENUBAR_NAME", "Collection", "useCollection", "createCollectionScope", "createCollection", "createMenubarContext", "createMenubarScope", "createContextScope", "createRovingFocusGroupScope", "useMenuScope", "createMenuScope", "useRovingFocusGroupScope", "MenubarContextProvider", "useMenubarContext", "Menubar", "React", "props", "forwardedRef", "value", "valueProp", "menubarProps", "direction", "useDirection", "dir", "rovingFocusGroupScope", "__scopeMenubar", "setValue", "useControllableState", "prop", "onChange", "onValueChange", "defaultProp", "defaultValue", "currentTabStopId", "setCurrentTabStopId", "$jLgaT$createElement", "prevValue", "Boolean", "MENU_NAME", "MenubarMenuProvider", "useMenubarMenuContext", "MenubarMenu", "menuProps", "autoValue", "useId", "context", "menuScope", "triggerRef", "wasKeyboardTriggerOpenRef", "open", "current", "onMenuClose", "TRIGGER_NAME", "MenubarTrigger", "triggerProps", "menuContext", "ref", "composedRefs", "useComposedRefs", "isFocused", "setIsFocused", "disabled", "triggerId", "contentId", "undefined", "composeEventHandlers", "onPointerDown", "event", "button", "ctrlKey", "onMenuOpen", "preventDefault", "onPointerEnter", "menubarOpen", "focus", "onKeyDown", "includes", "key", "onMenuToggle", "onFocus", "onBlur", "PORTAL_NAME", "MenubarPortal", "portalProps", "CONTENT_NAME", "MenubarContent", "contentProps", "getItems", "hasInteractedOutsideRef", "onCloseAutoFocus", "onFocusOutside", "target", "isMenubarTrigger", "some", "item", "contains", "onInteractOutside", "targetIsSubTrigger", "hasAttribute", "isKeyDownInsideSubMenu", "closest", "currentTarget", "prevMenuKey", "isPrevKey", "isNextKey", "items", "filter", "candidateValues", "map", "reverse", "currentIndex", "indexOf", "loop", "wrapArray", "slice", "nextValue", "checkForDefaultPrevented", "style", "GROUP_NAME", "MenubarGroup", "groupProps", "LABEL_NAME", "MenubarLabel", "labelProps", "ITEM_NAME", "MenubarItem", "itemProps", "CHECKBOX_ITEM_NAME", "MenubarCheckboxItem", "checkboxItemProps", "RADIO_GROUP_NAME", "MenubarRadioGroup", "radioGroupProps", "RADIO_ITEM_NAME", "MenubarRadioItem", "radioItemProps", "INDICATOR_NAME", "MenubarItemIndicator", "itemIndicatorProps", "SEPARATOR_NAME", "MenubarSeparator", "separatorProps", "ARROW_NAME", "MenubarArrow", "arrowProps", "SUB_NAME", "MenubarSub", "openProp", "defaultOpen", "setOpen", "onOpenChange", "children", "SUB_TRIGGER_NAME", "MenubarSubTrigger", "subTriggerProps", "SUB_CONTENT_NAME", "MenubarSubContent", "subContentProps", "array", "startIndex", "_", "index", "length", "Root", "Menu", "Trigger", "Portal", "Content", "Group", "Label", "Item", "CheckboxItem", "RadioGroup", "RadioItem", "ItemIndicator", "Separator", "Arrow", "Sub", "SubTrigger", "SubContent"]
}
