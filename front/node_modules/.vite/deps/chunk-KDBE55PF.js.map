{
  "version": 3,
  "sources": ["../../@radix-ui/react-toggle/dist/packages/react/toggle/src/index.ts", "../../@radix-ui/react-toggle/dist/packages/react/toggle/src/Toggle.tsx"],
  "sourcesContent": ["export {\n  Toggle,\n  //\n  Root,\n} from './Toggle';\nexport type { ToggleProps } from './Toggle';\n", "import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Toggle\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Toggle';\n\ntype ToggleElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface ToggleProps extends PrimitiveButtonProps {\n  /**\n   * The controlled state of the toggle.\n   */\n  pressed?: boolean;\n  /**\n   * The state of the toggle when initially rendered. Use `defaultPressed`\n   * if you do not need to control the state of the toggle.\n   * @defaultValue false\n   */\n  defaultPressed?: boolean;\n  /**\n   * The callback that fires when the state of the toggle changes.\n   */\n  onPressedChange?(pressed: boolean): void;\n}\n\nconst Toggle = React.forwardRef<ToggleElement, ToggleProps>((props, forwardedRef) => {\n  const { pressed: pressedProp, defaultPressed = false, onPressedChange, ...buttonProps } = props;\n\n  const [pressed = false, setPressed] = useControllableState({\n    prop: pressedProp,\n    onChange: onPressedChange,\n    defaultProp: defaultPressed,\n  });\n\n  return (\n    <Primitive.button\n      type=\"button\"\n      aria-pressed={pressed}\n      data-state={pressed ? 'on' : 'off'}\n      data-disabled={props.disabled ? '' : undefined}\n      {...buttonProps}\n      ref={forwardedRef}\n      onClick={composeEventHandlers(props.onClick, () => {\n        if (!props.disabled) {\n          setPressed(!pressed);\n        }\n      })}\n    />\n  );\n});\n\nToggle.displayName = NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = Toggle;\n\nexport {\n  Toggle,\n  //\n  Root,\n};\nexport type { ToggleProps };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;ACWA,IAAMA,6BAAO;AAqBb,IAAMC,gDAASC,aAAAA,YAA6C,CAACC,OAAOC,iBAAiB;AACnF,QAAM,EAAEC,SAASC,aAAX,iBAAyC,OAAzC,iBAAiE,GAAGC,YAAH,IAAmBJ;AAE1F,QAAM,CAACE,UAAU,OAAOG,UAAlB,IAAgCC,yCAAqB;IACzDC,MAAMJ;IACNK,UAAUC;IACVC,aAAaC;GAH2C;AAM1D,aACE,aAAAC,eAAC,0CAAU,QADb,SAAA;IAEI,MAAK;IACL,gBAAcV;IACd,cAAYA,UAAU,OAAO;IAC7B,iBAAeF,MAAMa,WAAW,KAAKC;KACjCV,aALN;IAME,KAAKH;IACL,SAASc,0CAAqBf,MAAMgB,SAAS,MAAM;AACjD,UAAI,CAAChB,MAAMa;AACTR,mBAAW,CAACH,OAAF;KAFe;GAP/B,CAAA;CAVW;AA0Bf,OAAA,OAAA,2CAAA;EAAA,aAAA;CAAA;AAIA,IAAMe,4CAAOnB;",
  "names": ["NAME", "Toggle", "React", "props", "forwardedRef", "pressed", "pressedProp", "buttonProps", "setPressed", "useControllableState", "prop", "onChange", "onPressedChange", "defaultProp", "defaultPressed", "$5AXX7$createElement", "disabled", "undefined", "composeEventHandlers", "onClick", "Root"]
}
