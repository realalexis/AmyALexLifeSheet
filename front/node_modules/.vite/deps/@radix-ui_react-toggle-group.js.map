{
  "version": 3,
  "sources": ["../../@radix-ui/react-toggle-group/dist/packages/react/toggle-group/src/index.ts", "../../@radix-ui/react-toggle-group/dist/packages/react/toggle-group/src/ToggleGroup.tsx"],
  "sourcesContent": ["export {\n  createToggleGroupScope,\n  //\n  ToggleGroup,\n  ToggleGroupItem,\n  //\n  Root,\n  Item,\n} from './ToggleGroup';\nexport type {\n  ToggleGroupSingleProps,\n  ToggleGroupMultipleProps,\n  ToggleGroupItemProps,\n} from './ToggleGroup';\n", "import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { Toggle } from '@radix-ui/react-toggle';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-direction';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * ToggleGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOGGLE_GROUP_NAME = 'ToggleGroup';\n\ntype ScopedProps<P> = P & { __scopeToggleGroup?: Scope };\nconst [createToggleGroupContext, createToggleGroupScope] = createContextScope(TOGGLE_GROUP_NAME, [\n  createRovingFocusGroupScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\n\ntype ToggleGroupElement = ToggleGroupImplSingleElement | ToggleGroupImplMultipleElement;\ninterface ToggleGroupSingleProps extends ToggleGroupImplSingleProps {\n  type: 'single';\n}\ninterface ToggleGroupMultipleProps extends ToggleGroupImplMultipleProps {\n  type: 'multiple';\n}\n\nconst ToggleGroup = React.forwardRef<\n  ToggleGroupElement,\n  ToggleGroupSingleProps | ToggleGroupMultipleProps\n>((props, forwardedRef) => {\n  const { type, ...toggleGroupProps } = props;\n\n  if (type === 'single') {\n    const singleProps = toggleGroupProps as ToggleGroupImplSingleProps;\n    return <ToggleGroupImplSingle {...singleProps} ref={forwardedRef} />;\n  }\n\n  if (type === 'multiple') {\n    const multipleProps = toggleGroupProps as ToggleGroupImplMultipleProps;\n    return <ToggleGroupImplMultiple {...multipleProps} ref={forwardedRef} />;\n  }\n\n  throw new Error(`Missing prop \\`type\\` expected on \\`${TOGGLE_GROUP_NAME}\\``);\n});\n\nToggleGroup.displayName = TOGGLE_GROUP_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ToggleGroupValueContextValue = {\n  type: 'single' | 'multiple';\n  value: string[];\n  onItemActivate(value: string): void;\n  onItemDeactivate(value: string): void;\n};\n\nconst [ToggleGroupValueProvider, useToggleGroupValueContext] =\n  createToggleGroupContext<ToggleGroupValueContextValue>(TOGGLE_GROUP_NAME);\n\ntype ToggleGroupImplSingleElement = ToggleGroupImplElement;\ninterface ToggleGroupImplSingleProps extends ToggleGroupImplProps {\n  /**\n   * The controlled stateful value of the item that is pressed.\n   */\n  value?: string;\n  /**\n   * The value of the item that is pressed when initially rendered. Use\n   * `defaultValue` if you do not need to control the state of a toggle group.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the value of the toggle group changes.\n   */\n  onValueChange?(value: string): void;\n}\n\nconst ToggleGroupImplSingle = React.forwardRef<\n  ToggleGroupImplSingleElement,\n  ToggleGroupImplSingleProps\n>((props: ScopedProps<ToggleGroupImplSingleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...toggleGroupSingleProps\n  } = props;\n\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  return (\n    <ToggleGroupValueProvider\n      scope={props.__scopeToggleGroup}\n      type=\"single\"\n      value={value ? [value] : []}\n      onItemActivate={setValue}\n      onItemDeactivate={React.useCallback(() => setValue(''), [setValue])}\n    >\n      <ToggleGroupImpl {...toggleGroupSingleProps} ref={forwardedRef} />\n    </ToggleGroupValueProvider>\n  );\n});\n\ntype ToggleGroupImplMultipleElement = ToggleGroupImplElement;\ninterface ToggleGroupImplMultipleProps extends ToggleGroupImplProps {\n  /**\n   * The controlled stateful value of the items that are pressed.\n   */\n  value?: string[];\n  /**\n   * The value of the items that are pressed when initially rendered. Use\n   * `defaultValue` if you do not need to control the state of a toggle group.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the toggle group changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst ToggleGroupImplMultiple = React.forwardRef<\n  ToggleGroupImplMultipleElement,\n  ToggleGroupImplMultipleProps\n>((props: ScopedProps<ToggleGroupImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...toggleGroupMultipleProps\n  } = props;\n\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const handleButtonActivate = React.useCallback(\n    (itemValue: string) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleButtonDeactivate = React.useCallback(\n    (itemValue: string) =>\n      setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <ToggleGroupValueProvider\n      scope={props.__scopeToggleGroup}\n      type=\"multiple\"\n      value={value}\n      onItemActivate={handleButtonActivate}\n      onItemDeactivate={handleButtonDeactivate}\n    >\n      <ToggleGroupImpl {...toggleGroupMultipleProps} ref={forwardedRef} />\n    </ToggleGroupValueProvider>\n  );\n});\n\nToggleGroup.displayName = TOGGLE_GROUP_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ToggleGroupContextValue = { rovingFocus: boolean; disabled: boolean };\n\nconst [ToggleGroupContext, useToggleGroupContext] =\n  createToggleGroupContext<ToggleGroupContextValue>(TOGGLE_GROUP_NAME);\n\ntype RovingFocusGroupProps = Radix.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype ToggleGroupImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ToggleGroupImplProps extends PrimitiveDivProps {\n  /**\n   * Whether the group is disabled from user interaction.\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * Whether the group should maintain roving focus of its buttons.\n   * @defaultValue true\n   */\n  rovingFocus?: boolean;\n  loop?: RovingFocusGroupProps['loop'];\n  orientation?: RovingFocusGroupProps['orientation'];\n  dir?: RovingFocusGroupProps['dir'];\n}\n\nconst ToggleGroupImpl = React.forwardRef<ToggleGroupImplElement, ToggleGroupImplProps>(\n  (props: ScopedProps<ToggleGroupImplProps>, forwardedRef) => {\n    const {\n      __scopeToggleGroup,\n      disabled = false,\n      rovingFocus = true,\n      orientation,\n      dir,\n      loop = true,\n      ...toggleGroupProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToggleGroup);\n    const direction = useDirection(dir);\n    const commonProps = { role: 'group', dir: direction, ...toggleGroupProps };\n    return (\n      <ToggleGroupContext scope={__scopeToggleGroup} rovingFocus={rovingFocus} disabled={disabled}>\n        {rovingFocus ? (\n          <RovingFocusGroup.Root\n            asChild\n            {...rovingFocusGroupScope}\n            orientation={orientation}\n            dir={direction}\n            loop={loop}\n          >\n            <Primitive.div {...commonProps} ref={forwardedRef} />\n          </RovingFocusGroup.Root>\n        ) : (\n          <Primitive.div {...commonProps} ref={forwardedRef} />\n        )}\n      </ToggleGroupContext>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * ToggleGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'ToggleGroupItem';\n\ntype ToggleGroupItemElement = ToggleGroupItemImplElement;\ninterface ToggleGroupItemProps extends Omit<ToggleGroupItemImplProps, 'pressed'> {}\n\nconst ToggleGroupItem = React.forwardRef<ToggleGroupItemElement, ToggleGroupItemProps>(\n  (props: ScopedProps<ToggleGroupItemProps>, forwardedRef) => {\n    const valueContext = useToggleGroupValueContext(ITEM_NAME, props.__scopeToggleGroup);\n    const context = useToggleGroupContext(ITEM_NAME, props.__scopeToggleGroup);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(props.__scopeToggleGroup);\n    const pressed = valueContext.value.includes(props.value);\n    const disabled = context.disabled || props.disabled;\n    const commonProps = { ...props, pressed, disabled };\n    const ref = React.useRef<HTMLDivElement>(null);\n    return context.rovingFocus ? (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!disabled}\n        active={pressed}\n        ref={ref}\n      >\n        <ToggleGroupItemImpl {...commonProps} ref={forwardedRef} />\n      </RovingFocusGroup.Item>\n    ) : (\n      <ToggleGroupItemImpl {...commonProps} ref={forwardedRef} />\n    );\n  }\n);\n\nToggleGroupItem.displayName = ITEM_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ToggleGroupItemImplElement = React.ElementRef<typeof Toggle>;\ntype ToggleProps = Radix.ComponentPropsWithoutRef<typeof Toggle>;\ninterface ToggleGroupItemImplProps extends Omit<ToggleProps, 'defaultPressed' | 'onPressedChange'> {\n  /**\n   * A string value for the toggle group item. All items within a toggle group should use a unique value.\n   */\n  value: string;\n}\n\nconst ToggleGroupItemImpl = React.forwardRef<ToggleGroupItemImplElement, ToggleGroupItemImplProps>(\n  (props: ScopedProps<ToggleGroupItemImplProps>, forwardedRef) => {\n    const { __scopeToggleGroup, value, ...itemProps } = props;\n    const valueContext = useToggleGroupValueContext(ITEM_NAME, __scopeToggleGroup);\n    const singleProps = { role: 'radio', 'aria-checked': props.pressed, 'aria-pressed': undefined };\n    const typeProps = valueContext.type === 'single' ? singleProps : undefined;\n    return (\n      <Toggle\n        {...typeProps}\n        {...itemProps}\n        ref={forwardedRef}\n        onPressedChange={(pressed) => {\n          if (pressed) {\n            valueContext.onItemActivate(value);\n          } else {\n            valueContext.onItemDeactivate(value);\n          }\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = ToggleGroup;\nconst Item = ToggleGroupItem;\n\nexport {\n  createToggleGroupScope,\n  //\n  ToggleGroup,\n  ToggleGroupItem,\n  //\n  Root,\n  Item,\n};\nexport type { ToggleGroupSingleProps, ToggleGroupMultipleProps, ToggleGroupItemProps };\n"],
  "mappings": "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",
  "names": ["TOGGLE_GROUP_NAME", "createToggleGroupContext", "createToggleGroupScope", "createContextScope", "createRovingFocusGroupScope", "useRovingFocusGroupScope", "ToggleGroup", "React", "forwardRef", "props", "forwardedRef", "toggleGroupProps", "type", "singleProps", "$jFibJ$react", "multipleProps", "Error", "ToggleGroupValueProvider", "useToggleGroupValueContext", "ToggleGroupImplSingle", "value", "valueProp", "toggleGroupSingleProps", "setValue", "useControllableState", "prop", "defaultProp", "defaultValue", "onChange", "onValueChange", "__scopeToggleGroup", "useCallback", "ToggleGroupImplMultiple", "toggleGroupMultipleProps", "handleButtonActivate", "itemValue", "prevValue", "handleButtonDeactivate", "filter", "ToggleGroupContext", "useToggleGroupContext", "ToggleGroupImpl", "rovingFocusGroupScope", "direction", "useDirection", "dir", "commonProps", "role", "rovingFocus", "ITEM_NAME", "ToggleGroupItem", "valueContext", "context", "pressed", "includes", "disabled", "ref", "useRef", "ToggleGroupItemImpl", "itemProps", "undefined", "typeProps", "onItemActivate", "onItemDeactivate", "Root", "Item"]
}
